# version: '3.8'
# volumes:
#   prometheus_data: {}
#   grafana_data: {}
# services:
#   turn-server:
#     # build: ./turn/
#     container_name: turn
#     # image: coturn/coturn
#     image: coturn/coturn
#     platform: linux/amd64
#     ports:
#       - "3478:3478/tcp"
#       - "3478:3478/udp"
#     networks:
#       - webrtc
#   react:
#     container_name: react
#     image: react
#     build:
#       context: ./my-app
#     stdin_open: true
#     environment:
#       - CI=true
#     ports:
#       - "3001:3000"
#     networks:
#       - webrtc
#   node:
#     container_name: node
#     # image: tonyliu666/node
#     image: node
#     build:
#       context: ./server
#     # expose:
#     #   - 5002
#     #   - 8001
#     #   - 8000
#     # build:
#     #   context: ./server
#     ports:
#       - "5002:5002"
#       - "8001:8001"
#       - "8000:8000"
#     networks:
#       - webrtc
#   prometheus:
#     image: prom/prometheus
#     restart: always
#     volumes:
#       - ./prometheus:/etc/prometheus/
#       - prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#       - '--web.console.templates=/usr/share/prometheus/consoles'
#     ports:
#       - 9090:9090
#     # network_mode: host
#     links:
#       - cadvisor:cadvisor
#       - alertmanager:alertmanager
#     depends_on:
#       - cadvisor
    
#   node-exporter:
#     image: prom/node-exporter
#     volumes:
#       - /proc:/host/proc:ro
#       - /sys:/host/sys:ro
#       - /:/rootfs:ro
#     command:
#       - '--path.procfs=/host/proc'
#       - '--path.sysfs=/host/sys'
#       - --collector.filesystem.ignored-mount-points
#       - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
#     ports:
#       - 9100:9100
#     # network_mode: host
#     restart: always
#     deploy:
#       mode: global
    
#   alertmanager:
#     image: prom/alertmanager
#     restart: always
#     ports:
#       - 9093:9093
#     # network_mode: host
#     volumes:
#       - ./alertmanager/:/etc/alertmanager/
#     command:
#       - '--config.file=/etc/alertmanager/config.yml'
#       - '--storage.path=/alertmanager'

#   cadvisor:
#     image: gcr.io/cadvisor/cadvisor
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:rw
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#     ports:
#       - 8080:8080
#     # network_mode: host
#     restart: always
#     deploy:
#       mode: global

#   grafana:
#     image: grafana/grafana
#     user: '472'
#     restart: always
#     environment:
#       GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
#     volumes:
#       - grafana_data:/var/lib/grafana
#       - ./grafana/provisioning/:/etc/grafana/provisioning/
#     env_file:
#       - ./grafana/config.monitoring
#     ports:
#       - 3000:3000
#     # network_mode: host
#     depends_on:
#       - prometheus
# networks:
#     webrtc:
version: '3.8'
volumes:
  prometheus_data: {}
  grafana_data: {}
services:
  turn-server:
    # build: ./turn/
    container_name: turn
    image: coturn/coturn
    platform: linux/amd64
    ports:
      - "3478:3478/tcp"
      - "3478:3478/udp"
    # networks:
    #   - webrtc
  react:
    container_name: react
    image: react
    build:
      context: react
      dockerfile: ./my-app/Dockerfile
    stdin_open: true
    environment:
      - CI=true
    ports:
      - "3002:3000"
    # networks:
    #   - webrtc
  node:
    container_name: node
    # image: tonyliu666/node
    image: node
    build:
      context: node
      dockerfile: ./server/Dockerfile
    # build:
    #   context: ./server
    ports:
      - "5002:5002"
      - "8001:8001"
      - "8000:8000"
    # expose:
    #   - 5002
    # networks:
    #   - webrtc
  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    # network_mode: host
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    # network_mode: host
    restart: always
    deploy:
      mode: global
    
  alertmanager:
    image: prom/alertmanager
    restart: always
    ports:
      - 9093:9093
    # network_mode: host
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    # network_mode: host
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: '472'
    restart: always
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    ports:
      - 3000:3000
    # network_mode: host
    depends_on:
      - prometheus
networks:
    webrtc: